import { NextResponse } from 'next/server';
import admin from 'firebase-admin';

// --- ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ---
if (!admin.apps.length) {
  const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT!);
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}
const db = admin.firestore();
// --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ---

export async function GET() {
  console.log("Cron job started...");
  try {
    const now = new Date();

    // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Timers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const querySnapshot = await db.collection('timers')
      .where('status', '==', 'pending')
      .where('end_time', '<=', now)
      .get();

    if (querySnapshot.empty) {
      console.log("No pending timers found.");
      return NextResponse.json({ message: "No pending timers found." });
    }

    const pushMessageUrl = 'https://api.line.me/v2/bot/message/push';
    const accessToken = process.env.LINE_MESSAGING_TOKEN;

    // 2. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
    for (const doc of querySnapshot.docs) {
      const timer = doc.data();
      const userId = timer.user_id;
      const machineId = timer.machine_id;

      const message = {
        to: userId,
        messages: [
          {
            type: 'text',
            text: `üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô! üîî\n‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ${machineId} ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ã‡∏±‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ üòä`,
          },
        ],
      };

      // 3. ‡∏™‡πà‡∏á Push Message ‡∏ú‡πà‡∏≤‡∏ô Messaging API
      const response = await fetch(pushMessageUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`,
        },
        body: JSON.stringify(message),
      });

      if (response.ok) {
        console.log(`Successfully sent notification to user ${userId} for machine ${machineId}`);
        // 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô 'sent' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
        await doc.ref.update({ status: 'sent' });
      } else {
        const errorResult = await response.json();
        console.error(`Failed to send notification to user ${userId}:`, errorResult);
      }
    }

    return NextResponse.json({ message: "Cron job executed successfully." });

  } catch (error) {
    console.error("Error executing cron job:", error);
    return NextResponse.json({ message: "Error executing cron job." }, { status: 500 });
  }
}